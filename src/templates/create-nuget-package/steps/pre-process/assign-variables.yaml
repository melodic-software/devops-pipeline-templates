parameters:
  - name: testProjects
    type: object
    default: ["*.csproj"]

steps:
  - task: PowerShell@2
    name: AssignVariables
    displayName: Assign Variables
    condition: succeeded()
    inputs:
      targetType: "inline"
      script: |
        # Escape percent signs, newlines, and carriage returns.
        # This is required for the $FormattedTestProjects and $FinalProjectList variable assignments below.
        # TODO: Migrate this out if needed in other scripts.
        function Escape-Data {
            param (
                [string]$Data
            )
            $Data = $Data -replace '%', '%AZP25'
            $Data = $Data -replace "`n", '%0A'
            $Data = $Data -replace "`r", '%0D'
            return $Data
        }

        # --------------------------------------------------
        # -- ASSEMBLY ORIGINATOR KEY FILE ------------------
        # --------------------------------------------------
        $AssemblyOriginatorKeyFile = "$(DownloadNuGetSigningKey.secureFilePath)"
        Write-Host "AssemblyOriginatorKeyFile: $AssemblyOriginatorKeyFile"
        Write-Host "##vso[task.setvariable variable=AssemblyOriginatorKeyFile;]$AssemblyOriginatorKeyFile"

        # --------------------------------------------------
        # -- FORMATTED TEST PROJECTS -----------------------
        # --------------------------------------------------
        # Convert the input parameter to a PowerShell array.
        $RawTestProjectsArray = "${{ join(',', parameters.testProjects) }}".Split(',', [System.StringSplitOptions]::RemoveEmptyEntries)

        # If the array is empty or contains only empty strings, set FormattedTestProjects to an empty string.
        if (-not ($RawTestProjectsArray -join '').Trim()) {
          $FormattedTestProjects = ''
        } else {
          # Trim each project path in the array.
          $TrimmedTestProjectsArray = $RawTestProjectsArray | ForEach-Object { $_.Trim() }

          # Define the path prefix.
          $TestProjectPathPrefix = "$(SelfRepositoryFolder)/test*/**/"

          # Initialize the hash table to enforce unique formatted paths.
          $UniqueFormattedProjectsHashTable = @{}
          
          # Prefix each project path with the specific directory structure.
          foreach ($Project in $TrimmedTestProjectsArray) {
            $FormattedPath = $TestProjectPathPrefix + $Project
            $UniqueFormattedProjectsHashTable[$FormattedPath] = $true
          }

          # Convert the keys of the hash table to an array to remove any duplicates.
          $UniqueFormattedProjectsArray = $UniqueFormattedProjectsHashTable.Keys

          # Combine all formatted project paths into a single string for output.
          # Use a newline to separate each path for proper interpretation in Azure DevOps tasks.
          $FormattedTestProjects = $UniqueFormattedProjectsArray -join "`n"
        }

        # Log the assigned value.
        Write-Host "Formatted Test Projects: $FormattedTestProjects"

        # Set the value using escaped data to ensure correct assignment in Azure DevOps.
        $EscapedFormattedTestProjects = Escape-Data -data $FormattedTestProjects
        Write-Host "##vso[task.setvariable variable=TestProjects;]$EscapedFormattedTestProjects"

        # --------------------------------------------------
        # -- FINAL PROJECT LIST ----------------------------
        # --------------------------------------------------
        $FinalProjectList = "**/$(ProjectName).csproj"

        if ($EscapedFormattedTestProjects -eq '') {
          $FinalProjectList += "`n**/tests*/*.csproj"
        } elseif ($EscapedFormattedTestProjects -eq (Escape-Data -data '["*.csproj"]')) {
          $FinalProjectList += "`n**/tests*/*.csproj"
        } else {
          # Split using both newline and comma to handle different input formats.
          $FormattedTestProjectsArray = $EscapedFormattedTestProjects -split "%0A|%2C"
          foreach ($TestProject in $FormattedTestProjectsArray) {
            if ($TestProject.Trim()) {
              $FinalProjectList += "`n$($TestProject.Trim())"
            }
          }
        }

        # Log the final project list.
        Write-Host "Final Project List:"
        Write-Host $FinalProjectList

        # Set the final project list using escaped data.
        $EscapedFinalProjectList = Escape-Data -data $FinalProjectList
        Write-Host "##vso[task.setvariable variable=ProjectList;]$EscapedFinalProjectList"
      pwsh: true
