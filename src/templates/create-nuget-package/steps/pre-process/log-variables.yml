steps:
- task: PowerShell@2
  name: LogVariables
  displayName: Log Pipeline-Specific Variables
  condition: succeeded()
  continueOnError: true
  inputs:
    targetType: 'inline'
    script: |
      function Log-PipelineVariable {
        param (
          [string]$VariableName,
          [string]$DisplayName
        )
        $VariableValue = [Environment]::GetEnvironmentVariable($VariableName)
        if (-not [string]::IsNullOrEmpty($VariableValue)) {
          Write-Host "$DisplayName: $VariableValue"
        } else {
          Write-Host "$DisplayName is not set or defaulted to null"
        }
      }

      # Hashtables mapping environment variable names to their Azure DevOps pipeline name
      
      $VariableDisplayNames = [ordered]@{
        # Predefined variables
        "NUGETASSEMBLYSNKFILE" = "NuGetAssemblySnkFile"
        "PACKAGEPREFIX" = "PackagePrefix"
        "AZUREDEVOPSPACKAGEFEED" = "AzureDevOpsPackageFeed"
        "AZUREDEVOPSPACKAGESYMBOLSFILEPATH" = "AzureDevopsPackageSymbolsFilePath"
        "GITHUBPACKAGESERVICEINDEX" = "GitHubPackageServiceIndex"
        "PROGETPACKAGESERVICEINDEX" = "ProGetPackageServiceIndex"
      }

      $SecretVariableDisplayNames = [ordered]@{
        # Variable group variables defined in Azure DevOps
        # Any that are defined as "secret" should result in masked values
        "GITHUBPACKAGEAPIKEY" = "GitHubPackageApiKey"
        "PROGETPACKAGEAPIKEY" = "ProGetPackageApiKey"
      }

      # Logging variables
      Write-Host "VARIABLES"
      foreach ($VariableName in $VariableDisplayNames.Keys) {
        Log-PipelineVariable -VariableName $VariableName -DisplayName $VariableDisplayNames[$VariableName]
      }

      # Logging secret variables
      # NOTE: only masked values will be logged
      Write-Host "SECRET VARIABLES"
      foreach ($VariableName in $SecretVariableDisplayNames.Keys) {
        Log-PipelineVariable -VariableName $VariableName -DisplayName $SecretVariableDisplayNames[$VariableName]
      }
    pwsh: true